#pragma once

// Clock Generation for the Intel 8080A CPU

#include "byte.hh"
#include "edge.hh"
#include "module.hh"
#include "tau.hh"

class Clk8080 : public Module {
public:
    Edge* OSC; // master oscillator -- INPUT TO SIM

    Edge PHI1;  // output: phase 1 clock for 8080
    Edge PHI2;  // output: phase 2 clock for 8080
    Edge PHI1A; // internal timing signal (clock for latches below)

    // These input signals are latched on PHI1A rising edge.
    Edge* RESIN; // ACTIVE LOW input: unsynchronized reset request
    Edge* RDYIN; // input: unsynchronized ready request
    Edge* DMARQ; // input: unsynchronized DMA request
    Edge* INTRQ; // input: unsynchronized DMA request

    // These output signals carry the values of the signals above
    // that were observed on the last PHI1A rising edge.
    Edge RESET; // output: synchronized RESET (latched on PHI2)
    Edge READY; // output: synchronized RESET (latched on PHI2)
    Edge HOLD;  // output: synchronized HOLD for DMA
    Edge INT;   // output: synchronized HOLD for DMA

    Edge* SYNC;  // input: start of machine cycle
    Edge  STSTB; // output: status byte strobe

    // These input signals
    Byte* D;    // input: CPU Data Bus
    Edge* DBIN; // input: DBIN from 8080
    Edge* WR;   // input: WR from 8080
    Edge* HLDA; // input: HLDA from 8080

    // These output signals are the "control bus"
    // that is generated by the 8228.
    Edge MEMR; // output: based on 8228 "control bus"
    Edge MEMW; // output: based on 8228 "control bus"
    Edge IOR;  // output: based on 8228 "control bus"
    Edge IOW;  // output: based on 8228 "control bus"
    Edge INTA; // output: based on 8228 "control bus"

    virtual void linked() = 0;

    static void     bist();
    static Clk8080* create(const char* name);

protected:
    Clk8080(const char*); // please use Clk8080::create(name)
};
