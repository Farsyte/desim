# -*- Makefile -*-
#
# Big Bunch of Make rules that I have accumulated

# This particular project never needs Make to advertise
# its working directory, so we can shut off all those
# reduncant messages.

MAKEFLAGS       += --no-print-directory

# Allow me to use "make Q=" to expose the commands
# being executed, but normally have them hidden.

Q               = @
I               = -
C               = $Q $I

# RF and RD exist because some versions of this file
# were tuned to deal with operating systems where these
# operations did not involve typing "/bin/rm ..."
RF              = $C /bin/rm -f
RD              = $C /bin/rm -fr

# Allow me to override certain items from the command line.
NOOP            = $C true
E               = $C echo
P		= $C printf

DDIR            = dep/
IDIR            = inc/
SDIR            = src/
ODIR            = obj/
LDIR            = lib/
BDIR            = bin/
TDIR            = test/

# LIBS            = util                        # add personal libraries
# SYSLIBS         = pthread ncurses m           # add system libraries

ALLLIBS         = $(LIBS) $(SYSLIBS)

HSRC            := ${wildcard ${IDIR}*.h}
CSRC            := ${wildcard ${SDIR}*.c}

OBJS            = ${CSRC:${SDIR}%.c=${ODIR}%.o}
DEPS            = ${CSRC:${SDIR}%.c=${DDIR}%.d}

INST		= ${PROG:%=${BDIR}%}

IDIRS           = ${IDIR}
LDIRS           = ${LDIR}

IFLAGS          = ${IDIRS:%=-I%}

DBGOPT          = $(DBG) $(OPT)

CFLAGS          =  ${STD} ${IFLAGS}            ${DBGOPT}  ${WFLAGS}

LDFLAGS         = ${LDIRS:%=-L%}
LDLIBS          = ${ALLLIBS:%=-l%}

LINK.c		= $(CC) $(CXXFLAGS) $(CPPFLAGS) $(XLDFLAGS) $(TARGET_ARCH)

# Start building up the "make" targets that I like to always have.

default::               		; ${NOOP}
all::			default         ; ${NOOP}
clean::                                 ; ${NOOP}

# Create a "make world" target that first builds
# the whole "clean" target, then when it is done
# successfully, works on the "all" target.

world::
	$C ${MAKE} clean
	$C ${MAKE} all

# Include any and all dependency files. This starts empty with
# a fresh (or cleaned) area, but adds dependencies so we can
# recompile sources that depend on headers that changed.

include ${wildcard ${DDIR}*.d} /dev/null

objs::		${OBJS}
default::	objs
clean::
	${RF} ${OBJS} ${DEPS}

inst::		${INST}
default::	inst
clean::
	${RF} ${INST}

# Modified compile rule
# - locate sources and objects in their proper directories
# - generate a breadcrumb output line
# - by default, do not echo the command lines
# - maintain a dependency file for each source file

${ODIR}%.o:    ${SDIR}%.c
	$E 'cc $* ...'
	$Q $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) $< -MM | \
	   sed '1s|^$*\.o: |$@: |' > ${DDIR}$*.d
	$Q $(COMPILE.c) $(OUTPUT_OPTION) $<

${INST}:	${OBJS}
	$E 'link ${PROG} ...'
	$Q ${LINK.c} ${OBJS} ${LOADLIBES} ${LDLIBS} -o '$@'

clean::
	${RF} ${INST}
	${RD} ${OBJS}
	${RD} ${DEPS}
