# -*- Makefile -*-
#
# Big Bunch of Make rules that I have accumulated

# Allow me to use "make Q=" to expose the commands
# being executed, but normally have them hidden.

Q               = @
I               = -
C               = $Q $I

# RF and RD exist because some versions of this file
# were tuned to deal with operating systems where these
# operations did not involve typing "/bin/rm ..."
RF              = $C /bin/rm -f
RD              = $C /bin/rm -fr


MAKEFLAGS	:= --no-print-directory

# Allow me to override certain items from the command line.
NOOP            = $C true
E               = $C echo
P		= $C printf

DEPDIR		:= dep/
INCDIR		:= inc/
SRCDIR		:= src/
BISTDIR		:= bist/
OBJDIR		:= obj/
LIBDIR		:= lib/
BINDIR		:= bin/
LOGDIR		:= log/

# LIBS            = util                        # add personal libraries
# SYSLIBS         = pthread ncurses m           # add system libraries

ALLLIBS         = $(LIBS) $(SYSLIBS)

HSRC            := ${wildcard ${INCDIR}*.h}
CSRC            := ${wildcard ${SRCDIR}*.c}
BSRC            := ${wildcard ${BISTDIR}*.c}

OBJS		:= ${CSRC:${SRCDIR}%.c=${OBJDIR}%.o} \
		   ${BSRC:${BISTDIR}%.c=${OBJDIR}%.o}
DEPS		:= ${CSRC:${SRCDIR}%.c=${DEPDIR}%.d} \
		   ${BSRC:${BISTDIR}%.c=${DEPDIR}%.d}
LOGS		:= ${CSRC:${SRCDIR}%.c=${LOGDIR}cc-%.err} \
		   ${BSRC:${BISTDIR}%.c=${LOGDIR}cc-%.err} \
		   ${PROG:%=${LOGDIR}ld-%.log} \
		   ${PROG:%=${LOGDIR}ld-%.err}

INST		:= ${PROG:%=${BINDIR}%}

INCDIRS		:= ${INCDIR}
LIBDIRS		:= ${LIBDIR}

IFLAGS		:= ${INCDIRS:%=-I%}

DBGOPT		:= $(DBG) $(PRO) $(OPT) $(COV)

CFLAGS		:=  ${STD} ${IFLAGS}            ${DBGOPT}  ${WFLAGS}

LDFLAGS		:= ${PRO} ${COV} ${LIBDIRS:%=-L%}
LDLIBS		:= ${ALLLIBS:%=-l%}

LINK.c		:= $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)

# Start building up the "make" targets that I like to always have.

default::               		; ${NOOP}
all::			default         ; ${NOOP}
clean::                                 ; ${NOOP}

# Create a "make world" target that first builds
# the whole "clean" target, then when it is done
# successfully, works on the "all" target.

world::
	$C ${MAKE} clean
	$C ${MAKE} all

# Include any and all dependency files. This starts empty with
# a fresh (or cleaned) area, but adds dependencies so we can
# recompile sources that depend on headers that changed.

include ${wildcard ${DEPDIR}*.d} /dev/null

objs::		${OBJS}
default::	objs
clean::
	${RF} ${OBJDIR}/*.o ${DEPDIR}/*.d

inst::		${INST}
default::	inst
clean::
	${RF} ${INST}

# Modified compile rule
# - locate sources and objects in their proper directories
# - generate a breadcrumb output line
# - by default, do not echo the command lines
# - maintain a dependency file for each source file

${OBJDIR}%.o:    ${SRCDIR}%.c
	$E 'cc $* ...'
	$Q $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) $< -MM | \
	   sed '1s|^$*\.o: |$@: |' > ${DEPDIR}$*.d
	$Q $(COMPILE.c) $(OUTPUT_OPTION) $< 2> ${LOGDIR}cc-$*.err

${OBJDIR}%.o:    ${BISTDIR}%.c
	$E 'cc $* ...'
	$Q $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) $< -MM | \
	   sed '1s|^$*\.o: |$@: |' > ${DEPDIR}$*.d
	$Q $(COMPILE.c) $(OUTPUT_OPTION) $< 2> ${LOGDIR}cc-$*.err

${INST}:	${OBJS}
	$E 'link ${PROG} ...'
	$Q ${LINK.c} ${OBJS} ${LOADLIBES} ${LDLIBS} -o '$@' 2> ${LOGDIR}ld-${PROG}.log

clean::
	${RF} ${LOGDIR}/*.err ${LOGDIR}/*.log
	${RF} ${INST}
	${RD} ${OBJDIR}/*.o
	${RD} ${DEPDIR}/*.d
